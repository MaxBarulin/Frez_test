import math

# Справочные данные для скоростей резания и подачи на зуб в зависимости от материала фрезы, типа фрезы и материала обработки
cutting_speeds = {
    "Т15К6": {
        "торцевая": {
            "Углеродистая сталь": (150, 220),
            "Низколегированная сталь": (160, 240),
            "Высоколегированная сталь": (100, 150),
            "Чугун": (120, 160),
            "Нержавеющая сталь": (80, 120),
            "Алюминиевые сплавы": (300, 500),
            "Латунь": (250, 400),
            "Медные сплавы": (230, 380),
            "Титан и его сплавы": (80, 130),
            "Никелевые сплавы": (40, 70),
            "Пластики": (400, 600)
        },
        "концевая": {
            "Углеродистая сталь": (180, 260),
            "Низколегированная сталь": (190, 270),
            "Высоколегированная сталь": (130, 180),
            "Чугун": (140, 180),
            "Нержавеющая сталь": (100, 140),
            "Алюминиевые сплавы": (350, 600),
            "Латунь": (300, 500),
            "Медные сплавы": (280, 450),
            "Титан и его сплавы": (100, 160),
            "Никелевые сплавы": (60, 90),
            "Пластики": (450, 700)
        }
    },
    "Р6М5": {
        "торцевая": {
            "Углеродистая сталь": (80, 120),
            "Низколегированная сталь": (90, 130),
            "Высоколегированная сталь": (60, 90),
            "Чугун": (70, 100),
            "Нержавеющая сталь": (40, 70),
            "Алюминиевые сплавы": (150, 250),
            "Латунь": (130, 200),
            "Медные сплавы": (120, 180),
            "Титан и его сплавы": (50, 70),
            "Никелевые сплавы": (20, 40),
            "Пластики": (250, 400)
        },
        "концевая": {
            "Углеродистая сталь": (100, 140),
            "Низколегированная сталь": (110, 150),
            "Высоколегированная сталь": (80, 110),
            "Чугун": (90, 120),
            "Нержавеющая сталь": (50, 80),
            "Алюминиевые сплавы": (200, 350),
            "Латунь": (160, 300),
            "Медные сплавы": (150, 250),
            "Титан и его сплавы": (60, 90),
            "Никелевые сплавы": (30, 50),
            "Пластики": (300, 500)
        }
    }
}

# Рекомендуемая подача на зуб для разных материалов и типов обработки
feed_per_tooth = {
    "Углеродистая сталь": (0.15, 0.25, 0.10, 0.15, 0.05, 0.10),
    "Низколегированная сталь": (0.15, 0.25, 0.10, 0.15, 0.05, 0.10),
    "Высоколегированная сталь": (0.10, 0.20, 0.08, 0.12, 0.05, 0.08),
    "Чугун": (0.20, 0.30, 0.15, 0.20, 0.08, 0.12),
    "Нержавеющая сталь": (0.10, 0.20, 0.08, 0.12, 0.05, 0.08),
    "Алюминиевые сплавы": (0.25, 0.40, 0.15, 0.25, 0.10, 0.15),
    "Латунь": (0.20, 0.30, 0.15, 0.20, 0.08, 0.12),
    "Медные сплавы": (0.20, 0.30, 0.15, 0.20, 0.08, 0.12),
    "Титан и его сплавы": (0.08, 0.15, 0.05, 0.10, 0.03, 0.05),
    "Никелевые сплавы": (0.05, 0.10, 0.03, 0.08, 0.02, 0.05),
    "Пластики": (0.30, 0.50, 0.20, 0.30, 0.15, 0.20)
}

# Удельное сопротивление резанию для различных материалов
kc_values = {
    "Углеродистая сталь": 1800,
    "Низколегированная сталь": 2200,
    "Высоколегированная сталь": 2500,
    "Чугун": 1500,
    "Нержавеющая сталь": 2800,
    "Алюминиевые сплавы": 700,
    "Латунь": 1000,
    "Медные сплавы": 1200,
    "Титан и его сплавы": 3000,
    "Никелевые сплавы": 3500,
    "Пластики": 500
}


# Функция для расчета мощности резания
def calculate_cutting_power(V, a, f_z, z, kc):
    return (kc * V * a * f_z * z) / (60 * 1000)


# Основная функция
def main():
    while True:
        # Шаг 0: Ввод мощности шпинделя
        spindle_power_input = input("\nВведите доступную мощность шпинделя (кВт) или оставьте пустым для пропуска: ")
        spindle_power = float(spindle_power_input) if spindle_power_input else None

        # Шаг 1: Выбор материала режущей части фрезы
        print("\nВыберите материал режущей части фрезы:")
        tool_materials = ["Т15К6 (твёрдосплавный)", "Р6М5 (быстрорежущая сталь)"]
        for i, tool_material in enumerate(tool_materials, start=1):
            print(f"{i}. {tool_material}")

        tool_material_choice = int(input("\nВведите номер выбранного материала фрезы: ")) - 1
        tool_material = "Т15К6" if tool_material_choice == 0 else "Р6М5"

        # Шаг 2: Выбор типа фрезы
        print("\nВыберите тип фрезы:")
        tool_types = ["Торцевая", "Концевая"]
        for i, tool in enumerate(tool_types, start=1):
            print(f"{i}. {tool}")

        tool_choice = int(input("\nВведите номер выбранного типа фрезы: ")) - 1
        tool_type = tool_types[tool_choice].lower()

        # Шаг 3: Выбор материала обработки
        print("\nВыберите материал обработки из списка:")
        materials = list(cutting_speeds[tool_material][tool_type].keys())
        for i, material in enumerate(materials, start=1):
            print(f"{i}. {material}")

        material_choice = int(input("\nВведите номер выбранного материала: ")) - 1
        material = materials[material_choice]

        # Шаг 4: Выбор типа обработки
        print("\nВыберите тип обработки:")
        processing_types = ["Черновая", "Получистовая", "Чистовая"]
        for i, process in enumerate(processing_types, start=1):
            print(f"{i}. {process}")

        process_choice = int(input("\nВведите номер выбранного типа обработки: ")) - 1
        processing_type = processing_types[process_choice].lower()

        # Шаг 5: Ввод диаметра фрезы и количества зубьев
        D = float(input("\nВведите диаметр фрезы (мм): "))
        z = int(input("Введите количество зубьев фрезы: "))

        # Определение скорости резания и подачи на зуб
        V_range = cutting_speeds[tool_material][tool_type][material]
        V_given = sum(V_range) / 2  # Средняя скорость резания

        fz_range = feed_per_tooth[material][(process_choice * 2):(process_choice * 2 + 2)]
        fz = sum(fz_range) / 2  # Среднее значение подачи на зуб

        # Выполняем расчёты без проверки мощности, если мощность шпинделя не указана
        if spindle_power is None:
            initial_n = (V_given * 1000) / (math.pi * D)
            initial_S = fz * initial_n * z
            print("\nРасчёт частоты вращения шпинделя:")
            print(f"Формула: n = (V * 1000) / (π * D)")
            print(f"Подставляем значения: n = ({V_given} * 1000) / (3.1416 * {D})")
            print(f"Частота вращения шпинделя n = {initial_n:.2f} об/мин")
            print(
                f"\nРекомендуемая подача на зуб для {material} ({processing_type} обработка): {fz_range[0]} – {fz_range[1]} мм/зуб")
            print(f"Выбранная подача на зуб f_z = {fz:.3f} мм/зуб")
            print("\nРасчёт подачи S:")
            print(f"Формула: S = f_z * n * z")
            print(f"Подставляем значения: S = {fz:.3f} * {initial_n:.2f} * {z}")
            print(f"Подача S = {initial_S:.2f} мм/мин")
            print("\nРежимы резания для расчета времени прохода:")
            print(
                f"Изначальные параметры:\n- Скорость резания V = {V_given:.2f} м/мин\n- Частота вращения n = {initial_n:.2f} об/мин\n- Подача S = {initial_S:.2f} мм/мин")

            # Запрашиваем длину обработки и рассчитываем время прохода
            include_overtravel = input(
                "\nУчитывать перебег инструмента?:\n1. да\n2. нет\n\nВведите номер варианта: ").strip().lower() == "1"
            while True:
                L = float(input("\nВведите длину обработки L (мм): "))
                L_with_overtravel = L + (0.1 * D if include_overtravel else 0)
                print(f"Итоговая длина L = {L_with_overtravel:.2f} мм")

                t_initial = L_with_overtravel / initial_S
                print("Время прохода для изначальных параметров:", round(t_initial, 2))

                choice = input(
                    "\nВыберите дальнейшие действия\n1. для новой длины\n2. для перезапуска\n3. для завершения\n\nВведите номер варианта:  ").strip()
                if choice == "1":
                    continue  # Переход на новую длину без перезапуска скрипта
                elif choice == "2":
                    return main()  # Полный перезапуск скрипта
                elif choice == "3":
                    print("Завершение программы.")
                    return  # Завершение программы
                else:
                    print("Неверный ввод, попробуйте снова.")
            return

        # Если мощность шпинделя указана, выполняем расчет мощности и проверку
        cutting_power = calculate_cutting_power(V_given, 3, fz, z, kc_values[material])
        print("\nРасчет мощности резания:")
        print(f"Формула: P = (K_c * V * a * f_z * z) / (60 * 1000)")
        print(f"Подставляем значения: P = ({kc_values[material]} * {V_given} * {3} * {fz:.3f} * {z}) / (60 * 1000)")
        print(f"Мощность резания P = {cutting_power:.2f} кВт")

        # Проверка мощности шпинделя и подбор оптимальных параметров, если мощность превышает доступную
        if cutting_power > spindle_power:
            print(
                f"\nВНИМАНИЕ: Требуемая мощность резания ({cutting_power:.2f} кВт) превышает доступную мощность шпинделя ({spindle_power} кВт).")
            print("Рекомендуется уменьшить скорость резания, чтобы снизить нагрузку на шпиндель.\n")

            # Поиск оптимальных параметров (уменьшение скорости резания на 10% до допустимого уровня)
            alternatives = []
            V_optimized = V_given
            while V_optimized >= V_given * 0.1:
                cutting_power_optimized = calculate_cutting_power(V_optimized, 3, fz, z, kc_values[material])

                if cutting_power_optimized <= spindle_power:
                    alternatives.append((V_optimized, cutting_power_optimized))
                V_optimized *= 0.9

            # Вывод оптимальных вариантов
            if alternatives:
                print("\nНайденные оптимальные параметры для снижения нагрузки на шпиндель:")
                for idx, (V_opt, power_opt) in enumerate(alternatives, 1):
                    print(f"Вариант {idx}: Скорость резания V = {V_opt:.2f} м/мин, Мощность = {power_opt:.2f} кВт")

                # Использование первого оптимального варианта
                optimal_V = alternatives[0][0]

                optimal_n = (optimal_V * 1000) / (math.pi * D)
                optimal_S = fz * optimal_n * z

                initial_n = (V_given * 1000) / (math.pi * D)
                initial_S = fz * initial_n * z


                print("\nРежимы резания для расчета времени прохода:\n")

                print(f"---------------------------")
                print(f"Изначальные параметры:\n- Скорость резания V = {V_given:.2f} м/мин\n- Частота вращения n = {initial_n:.2f} об/мин\n- Подача S = {initial_S:.2f} мм/мин")
                print("\nРасчёт частоты вращения шпинделя:")
                print(f"Формула: n = (V * 1000) / (π * D)")
                print(f"Подставляем значения: n = ({V_given} * 1000) / (3.1416 * {D})")
                print(f"Частота вращения шпинделя n = {initial_n:.2f} об/мин")
                print(f"\nРекомендуемая подача на зуб для {material} ({processing_type} обработка): {fz_range[0]} – {fz_range[1]} мм/зуб")
                print(f"Выбранная подача на зуб f_z = {fz:.3f} мм/зуб")
                print("\nРасчёт подачи S:")
                print(f"Формула: S = f_z * n * z")
                print(f"Подставляем значения: S = {fz:.3f} * {initial_n:.2f} * {z}")
                print(f"Подача S = {initial_S:.2f} мм/мин\n")

                print(f"---------------------------")
                print(f"Первый оптимальный вариант:\n- Скорость резания V = {optimal_V:.2f} м/мин\n- Частота вращения n = {optimal_n:.2f} об/мин\n- Подача S = {optimal_S:.2f} мм/мин")
                print("\nРасчёт частоты вращения шпинделя:")
                print(f"Формула: n = (V * 1000) / (π * D)")
                print(f"Подставляем значения: n = ({optimal_V} * 1000) / (3.1416 * {D})")
                print(f"Частота вращения шпинделя n = {optimal_n:.2f} об/мин")
                print(f"\nРекомендуемая подача на зуб для {material} ({processing_type} обработка): {fz_range[0]} – {fz_range[1]} мм/зуб")
                print(f"Выбранная подача на зуб f_z = {fz:.3f} мм/зуб")
                print("\nРасчёт подачи S:")
                print(f"Формула: S = f_z * n * z")
                print(f"Подставляем значения: S = {fz:.3f} * {optimal_n:.2f} * {z}")
                print(f"Подача S = {optimal_S:.2f} мм/мин")

                # Запрос и расчет длины обработки
                include_overtravel = input(
                    "\nУчитывать перебег инструмента?:\n1. да\n2. нет\n\nВведите номер варианта: ").strip().lower() == "1"
                while True:
                    L = float(input("\nВведите длину обработки L (мм): "))
                    L_with_overtravel = L + (0.1 * D if include_overtravel else 0)
                    print(f"Итоговая длина L = {L_with_overtravel:.2f} мм")

                    t_optimal = L_with_overtravel / optimal_S
                    t_initial = L_with_overtravel / initial_S

                    print("\nВремя прохода для оптимального варианта:", round(t_optimal, 2))
                    print("Время прохода для изначальных параметров:", round(t_initial, 2))

                    choice = input(
                        "\nВыберите дальнейшие действия\n1. для новой длины\n2. для перезапуска\n3. для завершения\n\nВведите номер варианта:  ").strip()
                    if choice == "1":
                        continue  # Новая длина без перезапуска
                    elif choice == "2":
                        return main()  # Полный перезапуск
                    elif choice == "3":
                        print("Завершение программы.")
                        return  # Завершение программы
                    else:
                        print("Неверный ввод, попробуйте снова.")
            else:
                print("Не удалось найти параметры, при которых нагрузка допустима.")
        else:
            print("Мощность шпинделя достаточна для изначально заданных параметров.")


main()

